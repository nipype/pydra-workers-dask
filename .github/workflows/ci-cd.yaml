#This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# For deployment, it will be necessary to create a PyPI API token and store it as a secret
# https://docs.github.com/en/actions/reference/encrypted-secrets

name: CI/CD

on:
  release:
    types: [published]
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: 3
      - run: pip install --upgrade build twine
      - run: python -m build
      - run: twine check dist/*
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Build archive
        run: |
          git clean -fxd
          mkdir archive
          git archive -o archive/pydra.zip HEAD
      - uses: actions/upload-artifact@v4
        with:
          name: archive
          path: archive/

  test:
    needs: ['build']
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.11', '3.12', '3.13']
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
      - name: Fetch tags
        run: git fetch --prune --unshallow
      - name: Setup Python version ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install package
        run: |
          pip install -e "."
      - name: Run tests for Dask
        run: |
          pytest -v pydra/engine/tests/test_submitter.py --only-worker=dask --rootdir pydra --cov pydra --cov-config .coveragerc --cov-report xml:cov.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}


  build-docs:
    needs: ['build']
    runs-on: ubuntu-latest
    # Set up the environment so that it finds conda
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - name: Install Pandoc for NBSphinx
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc
    - name: Install Dependencies for virtual notifications in Adv.-Exec Tutorial
      run: |
          sudo apt update
          sudo apt install -y xvfb libnotify-bin dbus-x11 xfce4-notifyd
    - name: Start Virtual Display (for notifications)
      run: |
        Xvfb :99 &
        export DISPLAY=:99
        eval "$(dbus-launch --sh-syntax)"
        echo "DISPLAY=:99" >> $GITHUB_ENV
        echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
    - name: Start Notification Daemon (for notifications)
      run: |
        xfce4-notifyd &
        sleep 2  # Give it some time to start
    - name: Send Notification (test notifications)
      run: |
        notify-send "GitHub Runner Notification" "This is a test notification from GitHub Actions"
    - name: Debug Running Processes (for notifications)
      run: |
        ps aux | grep notify
        ps aux | grep xfce4-notifyd
        dbus-monitor --session &
        sleep 3
    - uses: actions/checkout@v4
    - name: Fetch tags
      run: git fetch --prune --unshallow
    - name: Install Minconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-activate-base: true
        activate-environment: ""
    - name: Install MRtrix via Conda
      run: |
        conda install -c mrtrix3 mrtrix3
        mrconvert --version
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    - name: Install package
      run: pip install .[doc]
    - name: Install Python3 kernel
      run: python -m ipykernel install --user
    - name: Build docs
      run: |
        cd docs
        make html
        cd ..
    - uses: actions/upload-artifact@v4
      with:
        name: docs
        path: docs/build/html

  deploy:
    needs: [build-docs, test]
    runs-on: ubuntu-latest
    steps:
    - name: Download dist
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist
    - name: Check for PyPI token on tag
      id: deployable
      if: github.event_name == 'release'
      env:
        PYPI_API_TOKEN: "${{ secrets.PYPI_API_TOKEN }}"
      run: if [ -n "$PYPI_API_TOKEN" ]; then echo "DEPLOY=true" >> $GITHUB_OUTPUT; fi
    - name: Upload to PyPI
      if: steps.deployable.outputs.DEPLOY
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  deploy-docs:
    needs: [build-docs, deploy]
    runs-on: ubuntu-latest
    steps:
    - name: Download docs
      uses: actions/download-artifact@v4
      with:
        name: docs
        path: docs-build
    - name: Check for GHPAGES_DEPLOY_KEY token
      id: deployable
      if: github.event_name == 'release'
      env:
        GHPAGES_DEPLOY_KEY: "${{ secrets.GHPAGES_DEPLOY_KEY }}"
      run: if [ -n "$GHPAGES_DEPLOY_KEY" ]; then echo "DEPLOY=true" >> $GITHUB_OUTPUT; fi
    - name: Deploy Docs to GitHub Pages
      if: steps.deployable.outputs.DEPLOY
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GHPAGES_DEPLOY_KEY }}
        publish_dir: docs-build
